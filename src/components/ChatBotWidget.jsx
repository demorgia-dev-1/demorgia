import React, { useState, useEffect, useRef } from "react";
import {
  Box,
  Paper,
  TextField,
  IconButton,
  Typography,
  Stack,
  Avatar,
  Chip,
  CircularProgress,
  MenuItem,
  Select,
} from "@mui/material";
import SendIcon from "@mui/icons-material/Send";
import PersonIcon from "@mui/icons-material/Person";
import SmartToyIcon from "@mui/icons-material/SmartToy";
import { useNavigate } from "react-router-dom";

const ChatBot = () => {
  const navigate = useNavigate();
  const chatRef = useRef(null);

  const [input, setInput] = useState("");
  const [collectedName, setCollectedName] = useState("");
  const [collectedEmail, setCollectedEmail] = useState("");
  const [collectingStage, setCollectingStage] = useState("name");
  const [language, setLanguage] = useState("en");
  const [loading, setLoading] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackGiven, setFeedbackGiven] = useState(false);
  const [currentSuggestions, setCurrentSuggestions] = useState([]);
  const [messages, setMessages] = useState([]);
  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);

  const initialSuggestions = [
    "How do I register?",
    "How can I become an associate?",
  ];

  const relatedSuggestions = {
    register: ["Do I need to verify email?", "What details are required?"],
    assessment: ["Is it timed?", "Can I pause the test?"],
    result: ["When will I get results?", "Where can I check it?"],
    client: ["What services do you offer?", "How to partner with Demorgia?"],
  };

  const messagesMap = {
    greeting: {
      en: "WhatтАЩs your name?",
      hi: "рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?",
      bn: "ржЖржкржирж╛рж░ ржирж╛ржо ржХрзА?",
      ta: "роЙроЩрпНроХро│рпН рокрпЖропро░рпН роОройрпНрой?",
      mr: "рддреБрдордЪрдВ рдирд╛рд╡ рдХрд╛рдп рдЖрд╣реЗ?",
      gu: "ркдркорк╛рк░рлБркВ ркирк╛рко рк╢рлБркВ ркЫрлЗ?",
      kn: "р▓ир▓┐р▓ор│Нр▓о р▓╣р│Жр▓╕р▓░р│Б р▓Пр▓ир│Б?",
      ml: "р┤ир┤┐р┤ир╡Нр┤▒р╡Ж р┤кр╡Зр┤░р╡Н р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?",
      pa: "ридрйБри╣ри╛рибри╛ риири╛рио риХрйА ри╣рйИ?",
      ur: "╪в┘╛ ┌й╪з ┘Ж╪з┘Е ┌й█М╪з █Б█Т╪Я",
    },
    emailPrompt: {
      en: (name) => `Nice to meet you, ${name}! ЁЯУз Please share your email.`,
      hi: (name) => `рдорд┐рд▓рдХрд░ рдЕрдЪреНрдЫрд╛ рд▓рдЧрд╛, ${name}! ЁЯУз рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдИрдореЗрд▓ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВред`,
      bn: (name) =>
        `ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржжрзЗржЦрж╛ ржХрж░рзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧрж▓рзЛ, ${name}! ЁЯУз ржЖржкржирж╛рж░ ржЗржорзЗрж▓ ржжрж┐ржиред`,
      ta: (name) =>
        `роирпАроЩрпНроХро│рпН роЪроирпНродро┐рокрпНрокродро┐ро▓рпН роороХро┐ро┤рпНроЪрпНроЪро┐, ${name}! ЁЯУз роЙроЩрпНроХро│рпН рооро┐ройрпНройроЮрпНроЪро▓рпН роорпБроХро╡ро░ро┐ропрпИ рокроХро┐ро░ро╡рпБроорпН.`,
      mr: (name) =>
        `рддреБрдордЪреА рднреЗрдЯ рдЖрдирдВрджрджрд╛рдпрдХ рд╣реЛрддреА, ${name}! ЁЯУз рдХреГрдкрдпрд╛ рддреБрдордЪрд╛ рдИрдореЗрд▓ рд╢реЗрдЕрд░ рдХрд░рд╛.`,
      gu: (name) =>
        `ркдркоркирлЗ ркорк│рлАркирлЗ ркЖркиркВркж ркеркпрлЛ, ${name}! ЁЯУз ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлБркВ ркЗркорлЗркЗрк▓ рк╢рлЗрк░ ркХрк░рлЛ.`,
      kn: (name) =>
        `р▓ир▓┐р▓ор│Нр▓ор▓ир│Нр▓ир│Б р▓нр│Зр▓Яр▓┐р▓пр▓╛р▓Чр▓┐ р▓╕р▓Вр▓др│Лр▓╖р▓╡р▓╛р▓Чр▓┐р▓жр│Ж, ${name}! ЁЯУз р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓┐р▓ор│Нр▓о р▓Зр▓ор│Зр▓▓р│Н р▓╣р▓Вр▓Ър▓┐р▓Хр│Кр▓│р│Нр▓│р▓┐.`,
      ml: (name) =>
        `р┤ир┤┐р┤ир┤пр╡Ж р┤Хр┤╛р┤гр┤╛р┤ир┤╛р┤пр┤др╡Н р┤╕р┤ир╡Нр┤др╡Лр┤╖р┤В, ${name}! ЁЯУз р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Зр┤ор╡Жр┤пр┤┐р╡╜ р┤кр┤Щр╡Нр┤Хр╡Бр┤╡р╡Жр┤Хр╡Нр┤Хр╡В.`,
      pa: (name) =>
        `ридрйБри╣ри╛риирйВрй░ риори┐ри▓ риХрйЗ риЪрй░риЧри╛ ри▓рй▒риЧри┐риЖ, ${name}! ЁЯУз риХри┐ри░рикри╛ риХри░риХрйЗ риЖрикригри╛ риИриорйЗри▓ ри╕ри╛риВриЭри╛ риХри░рйЛред`,
      ur: (name) =>
        `╪в┘╛ ╪│█Т ┘Е┘Д ┌й╪▒ ╪о┘И╪┤█М █Б┘И╪ж█М╪М ${name}! ЁЯУз ╪и╪▒╪з█Б ┌й╪▒┘Е ╪з┘╛┘Ж╪з ╪з█М ┘Е█М┘Д ╪┤█М╪ж╪▒ ┌й╪▒█М┌║█Ф`,
    },
    invalidEmail: {
      en: " That doesn't look like a valid email. Please try again.",
      hi: " рдпрд╣ рдорд╛рдиреНрдп рдИрдореЗрд▓ рдирд╣реАрдВ рд▓рдЧрддрд╛ред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
      bn: " ржПржЯрж┐ ржмрзИржз ржЗржорзЗрж▓ ржиржпрж╝ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
      ta:
        " роЗродрпБ роЪрпЖро▓рпНро▓рпБрокроЯро┐ропро╛роХрпБроорпН рооро┐ройрпНройроЮрпНроЪро▓рпН роЕро▓рпНро▓. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
      mr: " рд╣реЗ рд╡реИрдз рдИрдореЗрд▓ рд╡рд╛рдЯрдд рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
      gu: " ркЖ ркорк╛ркирлНркп ркЗркорлЗркЗрк▓ ркиркерлА рк▓рк╛ркЧркдрлБркВ. ркХрлГрккрк╛ ркХрк░рлАркирлЗ рклрк░рлА рккрлНрк░ркпркдрлНрки ркХрк░рлЛ.",
      kn: " р▓Зр▓жр│Б р▓ор▓╛р▓ир│Нр▓п р▓Зр▓ор│Зр▓▓р│Н р▓Жр▓Чр▓┐р▓▓р│Нр▓▓. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.",
      ml: " р┤Зр┤др╡Н р┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤п р┤Зр┤ор╡Жр┤пр┤┐р╡╜ р┤кр╡Лр┤▓р┤┐р┤▓р╡Нр┤▓. р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
      pa: " риЗри╣ риЗрй▒риХ ри╡рйИриз риИриорйЗри▓ риири╣рйАриВ ри▓рй▒риЧрижрйАред риХри┐ри░рикри╛ риХри░риХрйЗ рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред",
      ur: " █М█Б ╪п╪▒╪│╪к ╪з█М ┘Е█М┘Д ┘Е╪╣┘Д┘И┘Е ┘Ж█Б█М┌║ █Б┘И╪к█М█Ф ╪п┘И╪и╪з╪▒█Б ┌й┘И╪┤╪┤ ┌й╪▒█М┌║█Ф",
    },
    ready: {
      en: (name) => ` Thanks, ${name}! How can I assist you today?`,
      hi: (name) => ` рдзрдиреНрдпрд╡рд╛рдж, ${name}! рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?`,
      bn: (name) => ` ржзржирзНржпржмрж╛ржж, ${name}! ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?`,
      ta: (name) => ` роиройрпНро▒ро┐, ${name}! роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЗройрпНро▒рпБ роОро╡рпНро╡ро╛ро▒рпБ роЙродро╡ро▓ро╛роорпН?`,
      mr: (name) => ` рдзрдиреНрдпрд╡рд╛рдж, ${name}! рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?`,
      gu: (name) =>
        ` ъ░РьВмэХйыЛИыЛд, ${name}! рк╣рлБркВ ркЖркЬрлЗ ркдркорк╛рк░рлА ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?`,
      kn: (name) => ` р▓зр▓ир│Нр▓пр▓╡р▓╛р▓жр▓Чр▓│р│Б, ${name}! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?`,
      ml: (name) => ` р┤ир┤ир╡Нр┤жр┤┐, ${name}! р┤Зр┤ир╡Нр┤ир╡Н р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р┤В?`,
      pa: (name) => ` ризрй░риири╡ри╛риж, ${name}! риорйИриВ ридрйБри╣ри╛рибрйА риЕрй▒риЬ риХри┐ри╡рйЗриВ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ?`,
      ur: (name) => ` ╪┤┌й╪▒█М█Б╪М ${name}! ┘Е█М┌║ ╪в╪м ╪в┘╛ ┌й█М ┌й╪│ ╪╖╪▒╪н ┘Е╪п╪п ┌й╪▒ ╪│┌й╪к╪з █Б┘И┌║╪Я`,
    },
    feedbackPrompt: {
      en: "Was this chat helpful?",
      hi: "рдХреНрдпрд╛ рдпрд╣ рдЪреИрдЯ рд╕рд╣рд╛рдпрдХ рдереА?",
      bn: "ржПржЗ ржЪрзНржпрж╛ржЯ ржХрж┐ рж╕рж╣рж╛ржпрж╝ржХ ржЫрж┐рж▓?",
      ta: "роЗроирпНрод роЙро░рпИропро╛роЯро▓рпН рокропройрпБро│рпНро│родро╛роХ роЗро░рпБроирпНродродро╛?",
      mr: "рд╣реА рдЪреЕрдЯ рдЙрдкрдпреБрдХреНрдд рдард░рд▓реА рдХрд╛?",
      gu: "рк╢рлБркВ ркЖ ркЪрлЗркЯ ркоркжркжрк░рлВркк рк░рк╣рлА?",
      kn: "р▓И р▓Ър▓╛р▓Яр│Н р▓╕р▓╣р▓╛р▓пр▓Хр▓╡р▓╛р▓Чр▓┐р▓др│Нр▓др▓╛?",
      ml: "р┤И р┤Ър┤╛р┤▒р╡Нр┤▒р╡Н р┤Йр┤кр┤Хр┤╛р┤░р┤кр╡Нр┤░р┤жр┤ор┤╛р┤пр┤┐р┤░р╡Бр┤ир╡Нр┤ир╡Л?",
      pa: "риХрйА риЗри╣ риЪрйИриЯ ри▓ри╛ринрижри╛риЗриХ ри╕рйА?",
      ur: "┌й█М╪з █М█Б ┌Ж█М┘╣ ┘Е╪п╪п┌п╪з╪▒ ╪к┌╛█М╪Я",
    },
    feedbackYes: {
      en: " Thank you for your feedback!",
      hi: " рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!",
      bn: " ржЖржкржирж╛рж░ ржорждрж╛ржорждрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!",
      ta: " роЙроЩрпНроХро│рпН роХро░рпБродрпНродрпБроХрпНроХрпБ роиройрпНро▒ро┐!",
      mr: " рддреБрдордЪреНрдпрд╛ рдЕрднрд┐рдкреНрд░рд╛рдпрд╛рдмрджреНрджрд▓ рдзрдиреНрдпрд╡рд╛рдж!",
      gu: " ркдркорк╛рк░рк╛ рккрлНрк░ркдрк┐рк╕рк╛ркж ркорк╛ркЯрлЗ ркЖркнрк╛рк░!",
      kn: " р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓др▓┐р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр│Ж р▓зр▓ир│Нр▓пр▓╡р▓╛р▓жр▓Чр▓│р│Б!",
      ml: " р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤нр┤┐р┤кр╡Нр┤░р┤╛р┤пр┤др╡Нр┤др┤┐р┤ир╡Н р┤ир┤ир╡Нр┤жр┤┐!",
      pa: " ридрйБри╣ри╛рибрйА рикрйНри░ридрйАриХри┐ри░ри┐риЖ ри▓риИ ризрй░риири╡ри╛риж!",
      ur: " ╪в┘╛ ┌й█М ╪▒╪з╪ж█Т ┌й╪з ╪┤┌й╪▒█М█Б!",
    },
    feedbackNo: {
      en: " Sorry to hear that. We'll work on improving.",
      hi: " рдЦреЗрдж рд╣реИ рдХрд┐ рдпрд╣ рд╕рд╣рд╛рдпрдХ рдирд╣реАрдВ рдереАред рд╣рдо рд╕реБрдзрд╛рд░ рдХрд░реЗрдВрдЧреЗред",
      bn: " ржжрзБржГржЦрж┐ржд, ржПржЯрж┐ рж╕рж╣рж╛ржпрж╝ржХ ржЫрж┐рж▓ ржирж╛ред ржЖржорж░рж╛ ржЙржирзНржирждрж┐рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмред",
      ta:
        " роЗродрпБ рокропройрпБро│рпНро│родро╛роХ роЗро▓рпНро▓рпИ роОройрпНро▒рпБ роХрпЗроЯрпНроЯрпБ ро╡ро░рпБроирпНродрпБроХро┐ро▒рпЗройрпН. роиро╛роЩрпНроХро│рпН роорпЗроорпНрокроЯрпБродрпНродрпБро╡рпЛроорпН.",
      mr: " рдорд╛рдл рдХрд░рд╛, рд╣реЗ рдЙрдкрдпреБрдХреНрдд рдирд╡реНрд╣рддреЗ. рдЖрдореНрд╣реА рд╕реБрдзрд╛рд░ рдХрд░реВ.",
      gu: " ркжрлБркГркЦ ркЫрлЗ ркХрлЗ ркЖ ркЙрккркпрлЛркЧрлА ркирк╣рлЛркдрлБркВ. ркЕркорлЗ рк╕рлБркзрк╛рк░ркгрк╛ ркХрк░рлАрк╢рлБркВ.",
      kn:
        " р▓И р▓Ър▓╛р▓Яр│Н р▓╕р▓╣р▓╛р▓пр▓Хр▓╡р▓╛р▓Чр▓┐р▓░р▓▓р▓┐р▓▓р│Нр▓▓ р▓Ор▓Вр▓мр│Бр▓жр▓Хр│Нр▓Хр│Ж р▓╡р▓┐р▓╖р▓╛р▓ж. р▓ир▓╛р▓╡р│Б р▓╕р│Бр▓зр▓╛р▓░р▓гр│Жр▓п р▓ор│Зр▓▓р│Ж р▓Хр│Жр▓▓р▓╕ р▓ор▓╛р▓бр│Бр▓др│Нр▓др│Зр▓╡р│Ж.",
      ml: " р┤Йр┤кр┤Хр┤╛р┤░р┤кр╡Нр┤░р┤жр┤ор┤╛р┤пр┤┐р┤▓р╡Нр┤▓ р┤Ор┤ир╡Нр┤ир╡Н р┤Хр╡Зр┤Яр╡Нр┤Яр╡Н р┤Хр╡Нр┤╖р┤ор┤┐р┤Хр╡Нр┤Хр┤гр┤В. р┤ир┤╛р┤В р┤ор╡Жр┤Ър╡Нр┤Ър┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др╡Бр┤В.",
      pa:
        " риЕрилри╝ри╕рйЛри╕ ри╣рйИ риХри┐ риЗри╣ риЪрйИриЯ ри▓ри╛ринрижри╛риЗриХ риири╣рйАриВ ри╕рйАред риЕри╕рйАриВ ри╕рйБризри╛ри░ риХри░рии рижрйА риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░ри╛риВриЧрйЗред",
      ur: " ╪з┘Б╪│┘И╪│ █Б█Т ┌й█Б █М█Б ┌Ж█М┘╣ ┘Е╪п╪п┌п╪з╪▒ ┘Ж█Б█М┌║ ╪к┌╛█М█Ф █Б┘Е ╪и█Б╪к╪▒█М ┌й█М ┌й┘И╪┤╪┤ ┌й╪▒█М┌║ ┌п█Т█Ф",
    },
  };

  const botReply = (msg) => {
    const text = msg.toLowerCase();
    if (text.includes("login") || text.includes("sign in"))
      return "Make sure your credentials are correct. You can reset your password if needed.";
    if (text.includes("register") || text.includes("signup"))
      return "Click the 'Sign Up' button and complete the form.";
    if (text.includes("start") && text.includes("assessment"))
      return "Go to your dashboard and click 'Start' next to your assigned test.";
    if (text.includes("rules") || text.includes("instructions"))
      return "Do not refresh or close the window during an assessment. Ensure a stable internet connection.";
    if (text.includes("result") || text.includes("score"))
      return "Results will be available on your dashboard within 24тАУ48 hours.";
    if (text.includes("error") || text.includes("technical"))
      return "Please email support@demorgia.com with a screenshot of the issue.";
    if (text.includes("grievance"))
      return "Please email grievance@demorgia.com with your name, email, and issue details.";
    // Case 1: For general help/contact/support
    if (
      text.includes("contact") ||
      text.includes("help") ||
      text.includes("support")
    ) {
      setTimeout(() => {
        navigate("/", { state: { scrollTo: "contact" } });
      }, 1000);
      return "Redirecting you to our contact page...";
    }

    // Case 2: For becoming a client
    if (text.includes("associate") && text.includes("become")) {
      setTimeout(() => {
        navigate("/", { state: { scrollTo: "contact" } });
      }, 1000);
      return "Sure! We're redirecting you to our contact page to begin your journey with us.";
    }

    if (text.includes("services") && text.includes("client")) {
      return "We provide online assessments, hiring support, campus engagement, and learning services tailored to client needs.";
    }
    if (
      text.includes("partner") ||
      text.includes("business") ||
      text.includes("collaboration")
    ) {
      return "We'd love to partner with you. Send us your requirements at hrd@demorgia.com and our team will get in touch.";
    }
    return "I'm here to help with assessment and client-related queries. Could you rephrase your question?";
  };

  const getSuggestionKey = (text) => {
    const msg = text.toLowerCase();
    if (msg.includes("register")) return "register";
    if (msg.includes("assessment")) return "assessment";
    if (msg.includes("result")) return "result";
    if (msg.includes("client")) return "client";
    return null;
  };

  const handleSend = (text = input.trim()) => {
    if (!text) return;
    const userMsg = {
      from: "user",
      text,
      time: new Date().toLocaleTimeString(),
    };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");
    setLoading(true);

    setTimeout(() => {
      if (collectingStage === "name") {
        setCollectedName(text);
        setMessages((prev) => [
          ...prev,
          {
            from: "bot",
            text: messagesMap.emailPrompt[language](text),
            time: new Date().toLocaleTimeString(),
          },
        ]);
        setCollectingStage("email");
        setLoading(false);
        return;
      }
      if (collectingStage === "email") {
        const isValidEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text);
        if (!isValidEmail) {
          setMessages((prev) => [
            ...prev,
            {
              from: "bot",
              text: messagesMap.invalidEmail[language],
              time: new Date().toLocaleTimeString(),
            },
          ]);
          setLoading(false);
          return;
        }
        setCollectedEmail(text);
        setMessages((prev) => [
          ...prev,
          {
            from: "bot",
            text: messagesMap.ready[language](collectedName),
            time: new Date().toLocaleTimeString(),
          },
        ]);
        setCollectingStage("done");
        setCurrentSuggestions(initialSuggestions);
        setLoading(false);
        return;
      }

      const replyText = botReply(text);
      const key = getSuggestionKey(text);
      setCurrentSuggestions(key ? relatedSuggestions[key] : []);

      const botMsg = {
        from: "bot",
        text: replyText,
        time: new Date().toLocaleTimeString(),
      };
      setMessages((prev) => {
        const updated = [...prev, botMsg];
        if (
          updated.filter((m) => m.from === "user").length >= 3 &&
          !feedbackGiven
        ) {
          setShowFeedback(true);
        }
        return updated;
      });
      setLoading(false);
    }, 1000);
  };

  const handleFeedback = (response) => {
    setMessages((prev) => [
      ...prev,
      {
        from: "bot",
        text:
          response === "yes"
            ? messagesMap.feedbackYes[language]
            : messagesMap.feedbackNo[language],
        time: new Date().toLocaleTimeString(),
      },
    ]);
    setFeedbackGiven(true);
    setShowFeedback(false);
  };

  useEffect(() => {
    if (messages.length === 0 && collectingStage === "name") {
      const hours = new Date().getHours();
      let greeting = "Hello";
      if (hours >= 5 && hours < 12) greeting = "Good Morning";
      else if (hours >= 12 && hours < 17) greeting = "Good Afternoon";
      else if (hours >= 17 && hours < 21) greeting = "Good Evening";

      setMessages([
        {
          from: "bot",
          text: `${greeting}!, I'm Evalia | Demorgia bot.`,
          time: new Date().toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit",
          }),
        },
        {
          from: "bot",
          text: `${messagesMap.greeting[language]}`,
          time: new Date().toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit",
          }),
        },
      ]);
    }
  }, [language]);

  useEffect(() => {
    chatRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, loading]);

  return (
    <Paper
      elevation={6}
      sx={{
        position: "fixed",
        bottom: 90,
        right: 20,
        width: 340,
        height: 500,
        display: "flex",
        flexDirection: "column",
        borderRadius: 3,
        overflow: "hidden",
        zIndex: 9998,
      }}
    >
      <Box
        sx={{
          p: 2,
          backgroundColor: "#1976d2",
          color: "white",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <Avatar sx={{ bgcolor: "#64b5f6", width: 28, height: 28, mr: 1 }}>
          <SmartToyIcon fontSize="small" />
        </Avatar>
        <Typography variant="h6" sx={{ flex: 1 }}>
          Evalia
        </Typography>

        <Box sx={{ position: "relative", zIndex: 10000 }}>
          <Select
            variant="standard"
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            disableUnderline
            sx={{
              color: "white",
              background: "transparent",
              minWidth: 70,
              ml: 1,
              "& .MuiSelect-icon": {
                color: "white",
              },
            }}
            MenuProps={{
              disablePortal: true,
              container: document.body,
              PaperProps: {
                sx: {
                  zIndex: 1302,
                  backgroundColor: "#0d47a1",
                  color: "white",
                  "& .MuiMenuItem-root:hover": {
                    backgroundColor: "#1565c0",
                  },
                  "& .Mui-selected": {
                    backgroundColor: "#1565c0 !important",
                  },
                },
              },
            }}
          >
            <MenuItem value="en">EN</MenuItem>
            <MenuItem value="hi">рд╣рд┐рдВрджреА</MenuItem>
            <MenuItem value="bn">ржмрж╛ржВрж▓рж╛</MenuItem>
            <MenuItem value="ta">родрооро┐ро┤рпН</MenuItem>
            <MenuItem value="mr">рдорд░рд╛рдареА</MenuItem>
            <MenuItem value="gu">ркЧрлБркЬрк░рк╛ркдрлА</MenuItem>
            <MenuItem value="kn">р▓Хр▓ир│Нр▓ир▓б</MenuItem>
            <MenuItem value="ml">р┤ор┤▓р┤пр┤╛р┤│р┤В</MenuItem>
            <MenuItem value="pa">рикрй░риЬри╛римрйА</MenuItem>
            <MenuItem value="ur">╪з╪▒╪п┘И</MenuItem>
          </Select>
        </Box>
      </Box>

      <Box
        sx={{ flex: 1, p: 2, overflowY: "auto", backgroundColor: "#f9f9f9" }}
      >
        {messages.map((msg, i) => (
          <Stack
            key={i}
            direction="row"
            justifyContent={msg.from === "user" ? "flex-end" : "flex-start"}
            sx={{ mb: 1 }}
          >
            {msg.from === "bot" && (
              <Avatar sx={{ bgcolor: "#64b5f6", width: 28, height: 28, mr: 1 }}>
                <SmartToyIcon fontSize="small" />
              </Avatar>
            )}
            <Box>
              <Box
                sx={{
                  px: 2,
                  py: 1,
                  borderRadius: 2,
                  fontSize: "0.9rem",
                  maxWidth: "220px",
                  bgcolor: msg.from === "user" ? "#1976d2" : "#e0e0e0",
                  color: msg.from === "user" ? "white" : "black",
                }}
              >
                {msg.text}
              </Box>
              <Typography
                variant="caption"
                sx={{ fontSize: "0.7rem", color: "#777", mt: 0.3 }}
              >
                {msg.time}
              </Typography>
            </Box>
            {msg.from === "user" && (
              <Avatar sx={{ bgcolor: "#555", width: 28, height: 28, ml: 1 }}>
                <PersonIcon fontSize="small" />
              </Avatar>
            )}
          </Stack>
        ))}
        {loading && (
          <Stack direction="row" alignItems="center" spacing={1}>
            <CircularProgress size={16} />
            <Typography
              variant="body2"
              sx={{ fontStyle: "italic", color: "#555" }}
            >
              Typing...
            </Typography>
          </Stack>
        )}
        <div ref={chatRef} />
      </Box>

      {collectingStage === "done" && currentSuggestions.length > 0 && (
        <Box
          sx={{
            px: 1,
            py: 1,
            display: "flex",
            flexWrap: "wrap",
            gap: 0.5,
            backgroundColor: "#f5f5f5",
            justifyContent: "center",
            borderTop: "1px solid #ddd",
          }}
        >
          {currentSuggestions.map((s, i) => (
            <Chip
              key={i}
              label={s}
              size="small"
              onClick={() => handleSend(s)}
              variant="outlined"
              sx={{
                borderRadius: 2,
                fontSize: "0.75rem",
                cursor: "pointer",
                "&:hover": { bgcolor: "#e3f2fd" },
              }}
            />
          ))}
        </Box>
      )}

      {showFeedback && !feedbackGiven && (
        <Box sx={{ p: 1, textAlign: "center", borderTop: "1px solid #ccc" }}>
          <Typography variant="body2" sx={{ mb: 1 }}>
            {messagesMap.feedbackPrompt[language]}
          </Typography>
          <Box>
            <Chip
              label="ЁЯСН Yes"
              onClick={() => handleFeedback("yes")}
              sx={{ mr: 1 }}
            />
            <Chip label="ЁЯСО No" onClick={() => handleFeedback("no")} />
          </Box>
        </Box>
      )}

      <Box sx={{ display: "flex", p: 1, borderTop: "1px solid #ccc" }}>
        <TextField
          size="small"
          fullWidth
          placeholder="Type your message"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && handleSend()}
        />
        <IconButton onClick={() => handleSend()} color="primary" sx={{ ml: 1 }}>
          <SendIcon />
        </IconButton>
      </Box>
    </Paper>
  );
};

export default ChatBot;
